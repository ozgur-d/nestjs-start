version: '3.9'

# Docker Compose for NestJS Starter - PostgreSQL 18 + Redis 8 + NestJS API
# Start with: docker compose -f docker-prod-conf/docker-compose.yml up -d

name: nestjs-starter

services:
  postgresql:
    image: postgres:18-alpine
    container_name: nestjs-postgresql
    restart: unless-stopped
    env_file:
      - .env.postgresql
    ports:
      - '2522:5432'
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U nestjs_user -d nestjs_starter_db']
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - nestjs-net

  redis:
    image: redis:8-alpine
    container_name: nestjs-redis
    restart: unless-stopped
    env_file:
      - .env.redis
    command: >
      sh -c "redis-server
      --requirepass $$REDIS_PASSWORD
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --save 900 1
      --save 300 10
      --save 60 10000"
    ports:
      - '2523:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - nestjs-net

  api:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    image: nestjs-starter-api:latest
    container_name: nestjs-api
    restart: unless-stopped
    env_file:
      - .env.app
    ports:
      - '5656:5656'
    volumes:
      - api_uploads:/app/public/uploads
      - api_assets:/app/public/assets
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "fetch('http://localhost:5656/api/v1/health').then(r => process.exit(r.ok ? 0 : 1)).catch(() => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    networks:
      - nestjs-net

  nginx:
    image: nginx:1.28-alpine
    container_name: nestjs-nginx
    restart: unless-stopped
    ports:
      - '2520:80'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - api_uploads:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nestjs-net

networks:
  nestjs-net:
    name: nestjs-starter-net

volumes:
  postgresql_data:
  redis_data:
  api_uploads:
  api_assets:
  nginx_logs:
